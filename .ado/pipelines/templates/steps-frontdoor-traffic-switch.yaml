parameters:
  - name: trafficWeightNewBackends # Percentage of traffic for new backends
    type: number
    default: 10
  - name: removeDisabledBackends # if set to true, any backends in Front Door that are in a Disabled state (from a previous run of this script), will be now removed
    type: boolean
    default: false
  - name: purgeAfdCache # whether to purge the Edge cache of Front Door
    type: boolean
    default: false

# We have this as both a stage-template and a steps-template.
# Reason for this is that we use it in two different places:
# Once we need the deployment job to have approvals and once we call it from inside another deployment job
steps:

- template: steps-parse-terraform-output.yaml # parse global configuration settings from terraform deployment output
  parameters:
    workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

- task: AzureCLI@2
  displayName: 'Create updated Front Door backend list'
  retryCountOnTaskFailure: 1
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |

      $newBackendsWeight = ${{ parameters.trafficWeightNewBackends }}
      $oldBackendsWeight = 100 - $newBackendsWeight # since the weight for the new backends is a percentage, we substract from 100 to get the remaining weights for the old backends

      if($oldBackendsWeight -lt 1)
      {
        $oldBackendsWeight = 1 # needs to be 1 at a minimum, but we will set them now to disabled
        $oldBackendsEnabled = "false"
      }
      else
      {
        $oldBackendsEnabled = "true"
      }

      $removeDisabledBackends = [System.Convert]::ToBoolean("${{ parameters.removeDisabledBackends }}") # parse parameter to make sure PS interprets it as a boolean
      echo "*** Remove disabled backends? $removeDisabledBackends"

      # These names must match what is defined in the Front Door Terraform template
      $backendPools = @("BackendApis", "StaticStorage")

      $newBackends = @{}
      foreach($pool in $backendPools)
      {
        $newBackends[$pool] = @() # initialize a hashtable with a list of arrays per pool name
      }

      # Load and parse release unit terraform outputs
      $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON
      $privateLinkInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputPrivateLinkInfra/*.json | Get-Content | ConvertFrom-JSON

      # loop through stamps from pipeline artifact json
      foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

        # Build API backend config object for Front Door
        $clusterFqdn = $stamp.aks_cluster_ingress_fqdn

        # Fetch corresponsing private link properties for this stamp
        $privateLinkProperties = $privateLinkInfraDeployOutput.stamp_properties.value | Where-Object { $_.location -eq $stamp.location }

        if(-not $privateLinkProperties)
        {
          throw "*** No private link properties for stamp $($stamp.location)"
        }

        $apiProperties = @{ address = $clusterFqdn; `
                            weight = $newBackendsWeight; `
                            enabled = "true"; `
                            privatelink_service_id = $privateLinkProperties.private_link_service_resource_id; `
                            privatelink_location = $stamp.location }

        $apiBackend = New-Object PSObject –Property $apiProperties

        echo "*** Adding API backend $apiBackend"

        $newBackends["BackendApis"] += $apiBackend

        # Build static storage backend config object for Front Door
        $staticStorageUri = $stamp.storage_web_host

        $storageProperties = @{address=$staticStorageUri; weight=$newBackendsWeight; enabled="true"}
        $storageBackend = New-Object PSObject –Property $storageProperties

        echo "*** Adding Storage backend $storageBackend"

        $newBackends["StaticStorage"] += $storageBackend
      }

      # Loop through backend pools
      foreach($pool in $backendPools)
      {
        $queryOptionEnabledOnly = ""
        if($removeDisabledBackends)
        {
          $queryOptionEnabledOnly = "?enabledState=='Enabled'" # If the switch to remove disabled backends is true, we only fetch the currently enabled ones and thereby not re-adding the disabled ones
        }

        # Fetch existing backends in the pool from Front Door
        $backends = az afd origin list `
                    --profile-name $(frontdoor_name) `
                    --origin-group-name $pool `
                    --resource-group $(global_resource_group_name) `
                    --query "[$queryOptionEnabledOnly]" | ConvertFrom-Json -NoEnumerate

        if($LastExitCode -ne 0)
        {
            throw "*** Error on fetching existing backends from Front Door $(frontdoor_name) for pool $pool"
        }

        foreach($backend in $backends)
        {
          if(($newBackends[$pool] | Select-Object "address") -match $backend.hostName) # This is the case if the backend was already added from the Terraform output above
          {
            echo "*** Skipping backend $($backend.hostName) since it is already in the list"
          }
          else
          {
            $backendProperties = @{ address = $backend.hostName; `
                      weight = $oldBackendsWeight; `
                      enabled = ""; `
                      privatelink_service_id = ""; `
                      privatelink_location = "" }

            # Rewrite EnabledState into bool (true/false) for terraform input
            if($backend.enabledState -eq "Enabled")
            {
              $backendProperties.enabled = $oldBackendsEnabled
            }
            else
            {
              $backendProperties.enabled = "false"
            }

            if($backend.sharedPrivateLinkResource) # This is a privatelink backend
            {
              $backendProperties.privatelink_service_id = $backend.sharedPrivateLinkResource.privateLink.id
              $backendProperties.privatelink_location = $backend.sharedPrivateLinkResource.privateLinkLocation
            }

            $backendConfig = New-Object PSObject –Property $backendProperties
            $newBackends[$pool] += $backendConfig
          }
        }
        # Convert the list back to JSON (in a one-liner) so we can use it as Terraform input
        $flatJsonApis = $newBackends[$pool] | ConvertTo-Json -Compress -Depth 100 -AsArray
        echo "*** New backends to set for pool '$($pool)': " $flatJsonApis

        $content = "-var='backends_$pool=$flatJsonApis'"

        echo "##vso[task.setvariable variable=tfParameterFrontDoor$pool]$content"
      }

# Global Resources terraform init
- template: steps-terraform-init.yaml
  parameters:
    terraformStorageAccountName:       '$(terraformStorageAccount)'
    terraformStorageResourceGroupName: '$(terraformResourceGroup)'
    terraformStateFilename:     '$(terraformStateFileGlobal)'
    terraformWorkingDirectory:  '$(workingDirectory)/globalresources'


# Global Resources deployment which will apply the new backend config to Front Door
- template: steps-terraform-apply.yaml # terraform validate, plan and apply for global resources
  parameters:
    jobName:                    'GlobalInfra'
    terraformWorkingDirectory:  '$(workingDirectory)/globalresources'
    customPrefix:               '$(prefix)'      # custom resource prefix
    customSuffix:               '$(globalResourceSuffix)'
    customAttributes: '-var=branch="$(sourceBranch)"
                       -var=queued_by="$(Build.QueuedBy)"
                       -var=contact_email="$(contactEmail)"
                       -var=''stamps=$(stampLocations)''
                       -var=custom_dns_zone=$(envDomainName)
                       -var=custom_dns_zone_resourcegroup_name=$(envDnsZoneRG)
                       -var=front_door_subdomain=$(domainSuffix)
                       $(tfParameterFrontDoorBackendApis)
                       $(tfParameterFrontDoorStaticStorage)'

# After new backends have been added to Front Door, we might have to approve new Private Endpoint connections for Front Door
- task: AzureCLI@2
  displayName: 'Approve Front Door Private Endpoint Connections'
  retryCountOnTaskFailure: 1
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |

      $privateLinkInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputPrivateLinkInfra/*.json | Get-Content | ConvertFrom-JSON

      # loop through stamps from pipeline artifact json
      foreach($stamp in $privateLinkInfraDeployOutput.stamp_properties.value)
      {
        $plServiceId = $stamp.private_link_service_resource_id
        echo "*** Looking up Private Endpoint connections on Private Link $plServiceId"

        $peConnections = az network private-endpoint-connection list --id $plServiceId | ConvertFrom-Json

        # Get pending connections which were made by our Front Door
        $afdConnections = $peConnections | Where-Object { $_.properties.privateLinkServiceConnectionState.description -eq "Request access for CDN Frontdoor Private Link Origin for prefix $(prefix)$(globalResourceSuffix)" }
        if(-not $afdConnections)
        {
          # If there are no connections from Front Door, that indicates a problem as we would expect at least a pending connection at this point
          throw "*** No Private Endpoint connections from Front Door on Private Link service $plServiceId"
        }

        # Get connections which are pending approval
        $pendingConnections = $afdConnections | Where-Object { $_.properties.privateLinkServiceConnectionState.status -eq "Pending" }

        if(-not $pendingConnections)
        {
          echo "*** Found $($afdConnections.Count) Private Endpoint connections from Front Door, all of which are already approved"
        }

        foreach($pendingPe in $pendingConnections)
        {
          echo "*** Found pending Private Endpoint Connection from Front Door: $($pendingPe.name). Approving..."
          az network private-endpoint-connection approve --id $pendingPe.id `
                                                         --description "$($pendingPe.properties.privateLinkServiceConnectionState.description)" # keep original description

          if($LastExitCode -ne 0)
          {
              throw "*** Error on approving private endpoint connection $($pendingPe.name)"
          }
        }
      }

- ${{ if eq(parameters.purgeAfdCache, 'true') }}:
  # After new backends have been added to Front Door, we purge the cache so that content will be retrieved from the new backends as well
  - task: AzureCLI@2
    displayName: 'Purge Front Door cache'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        echo "*** Purging Front Door cache with path /*"
        az afd endpoint purge `
        --resource-group $(global_resource_group_name) `
        --profile-name $(frontdoor_name) `
        --content-paths "/*" `
        --endpoint-name "$(prefix)$(globalResourceSuffix)-primaryendpoint"

        if($LastExitCode -ne 0)
        {
            throw "*** Error on purging cache in Front Door $(frontdoor_name)"
        }
