jobs:
- job: deployconfiguration
  displayName: 'Deploy K8s Configuration'
  steps:

  - download: current # download pipeline artifacts

  - template: steps-buildagent-prerequisites.yaml

  - task: AzureCLI@2
    displayName: 'Install ingress-nginx $(ingressNginxVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          echo "*** Configuring stamp in region $($stamp.location)"
          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Gather Ingress Internal Load Balancer and privatelink properties from pipeline artifact json
          $aksIngressIp = $stamp.aks_internal_lb_ip_address
          $loadBalancerSubnetName = $stamp.aks_ingress_loadbalancer_subnet_name
          $privatelinkSubnetName = $stamp.aks_ingress_privatelink_subnet_name

          # Deploy ingress-nginx (helm) configuration
          echo "*** Installing nginx ingress controller ($aksIngressIp) in namespace $(ingressNamespace) on $aksClusterName in $aksClusterResourceGroup"
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          # Deploy helm chart for ingress-nginx using a custom load balancer ip and resource group (RG in which the Public IP sits in)
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx `
                --namespace $(ingressNamespace) --create-namespace `
                --values src/config/ingress-nginx/values.helm.yaml `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-ipv4"="$aksIngressIp" `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"="true" `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal-subnet"="$loadBalancerSubnetName" `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-pls-create"="true" `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-pls-name"="$(aksPrivateLinkServiceName)" `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-pls-ip-configuration-subnet"="$privatelinkSubnetName" `
                --version "$(ingressNginxVersion)" `
                --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing nginx helm chart!"
          }
        }

  - task: AzureCLI@2
    displayName: 'Configure OMSAgent (Container Insights) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Apply ConfigMap which configures OMS Agent's log and metric collection. Take a look at the reference file to understand what is being collected/excluded
          echo "*** Apply configmap for OMSAgent (Container Insights) on $aksClusterName"
          kubectl apply -f src/config/monitoring/container-azm-ms-agentconfig.yaml

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing OMSAgent configmap!"
          }
        }

  - task: AzureCLI@2
    displayName: 'Install cert-manager $(certManagerVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # Retrieve current subscription id
        $subscriptionId = $(az account show --query "id" --output tsv)

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Deploy required custom resource definitions needed for cert-manager
          echo "*** Apply cert-manager CRDs on $aksClusterName"
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/$(certManagerVersion)/cert-manager.crds.yaml

          $certManagerNamespace = "cert-manager"

          $kubeletIdentityClientId = $stamp.aks_kubelet_clientid

          echo "*** Setting up cert-manager ClusterIssuer for Azure DNS-based Let's Encrypt issuer with domain name $(envDomainName)"
          helm upgrade --install cert-manager-config src/config/cert-manager/chart/cert-manager-config`
                        --namespace $certManagerNamespace --create-namespace `
                        --set azure.subscriptionId=$subscriptionId `
                        --set azure.dnsZoneName="$(envDomainName)" `
                        --set azure.dnsZoneResourceGroupName="$(envDnsZoneRG)" `
                        --set azure.managedIdentityClientId="$kubeletIdentityClientId" `
                        --set letsencrypt.contactEmail="$(contactEmail)" `
                        --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing ClusterIssuer helm chart!"
          }

          echo "*** Installing cert-manager via helm on $aksClusterName"
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager `
                       --values src/config/cert-manager/values.helm.yaml `
                       --namespace $certManagerNamespace --create-namespace `
                       --version "$(certManagerVersion)" `
                       --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing cert-manager helm chart!"
          }

        }
